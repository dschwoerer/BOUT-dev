#!/usr/bin/env python

# 
# Run the test, compare results against the benchmark
#

from __future__ import print_function

# Variables to compare
try:
  from builtins import str
except:
  print("Warning: No builtins module")

vars = ['var0_2D', 'var0_3D', 
        'var1_2D', 'var1_3D', 
        'var2_2D', 'var2_3D', 
        'var3_2D', 'var3_3D', 
        'var4_2D', 'var4_3D']
tol = 1e-10                  # Absolute tolerance

from boututils import shell,launch,getmpirun
from boutdata import collect
import numpy as np
from sys import stdout, exit

MPIRUN=getmpirun()
BOUTINP='BOUT.inp_bal'

print("Making initial profile test")
shell("make > make.log")

# Read benchmark values
print("Reading benchmark data")
bmk = {}
for v in vars:
  bmk[v] = collect(v, path="data", prefix="benchmark", info=False)

print("Running initial profile test")
success = True

nype = 4
for nxpe in [1,2]:
  nproc = nxpe * nype
  cmd = "./test_initial"
  
  shell("rm data/BOUT.dmp.*.nc")

  print("   %d processor...." % (nproc))
  s, out = launch(cmd+" -f "+BOUTINP+" nxpe="+str(nxpe), runcmd=MPIRUN, nproc=nproc, pipe=True, verbose=True)
  f = open("run.log."+str(nproc), "w")
  f.write(out)
  f.close()
  
   # Collect output data
  for v in vars:
    stdout.write("      Checking variable "+v+" ... ")
    result = collect(v, path="data", info=False)
    # Compare benchmark and output
    if np.shape(bmk[v]) != np.shape(result):
      print("Fail, wrong shape")
      success = False
    diff =  np.max(np.abs(bmk[v] - result))
    if diff > tol:
      print("Fail, maximum difference = "+str(diff))
      success = False
    else:
      print("Pass")

if success:
  print(" => All initial profile tests passed")
  exit(0)
else:
  print(" => Some failed tests")
  exit(1)
