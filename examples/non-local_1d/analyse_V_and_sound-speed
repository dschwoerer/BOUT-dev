#!/usr/bin/env python

#
# Runs the conduction example, produces some output
#

from __future__ import print_function
from builtins import str
from builtins import range
nproc = 1  # Number of processors to use
from boututils.run_wrapper import shell, launch
from boutdata.plotdata import plotdata
from boutdata.collect import collect
import numpy as np
from sys import argv
from math import sqrt
from matplotlib import pyplot

slice_index = int(argv[1])
try:
  data_path = str(argv[2])
except:
  data_path = "data"

# Collect the data
V = collect("Vpar_ion", path=data_path, xind=2, info=True, yguards=True)
Te = collect("T_electron", path=data_path, xind=2, info=True, yguards=True)
Ti = collect("T_ion", path=data_path, xind=2, info=True, yguards=True)

ion_mass = 3.34358348e-27
elementary_charge = 1.602176565e-19

cellcentreposition=[]
sound_speed = []
minus_sound_speed = []
for i in range(2,len(V[0,0,:,0])-3):
  print(i)
  cellcentreposition.append(i-1.5)
  sound_speed.append(sqrt((Te[slice_index,0,i,0]+3.*Ti[slice_index,0,i,0])*elementary_charge/ion_mass))
  minus_sound_speed.append(-sqrt((Te[slice_index,0,i,0]+3.*Ti[slice_index,0,i,0])*elementary_charge/ion_mass))

# V has dimensions [Time, X, Y, Z]
for index, item in enumerate(V[slice_index,0,:,0]):
	print(index, item)
# Make contour plot
#plotdata(V[slice_index,0,2:-2,0],title="Velocity Profile and (collisionless, adiabatic) Sound Speed at t="+str(argv[1]))
pyplot.plot(V[slice_index,0,2:-2,0],'b',cellcentreposition,sound_speed,'r',cellcentreposition,minus_sound_speed,'r')
pyplot.title("Velocity Profile and (collisionless, adiabatic) Sound Speed at t="+str(argv[1]))
pyplot.show()
